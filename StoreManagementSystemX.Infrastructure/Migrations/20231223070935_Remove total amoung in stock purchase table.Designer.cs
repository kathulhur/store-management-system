// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreManagementSystemX.Database;

#nullable disable

namespace StoreManagementSystemX.Infrastructure.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20231223070935_Remove total amoung in stock purchase table")]
    partial class Removetotalamounginstockpurchasetable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.DTO.ProductDBModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("InStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.DTO.TransactionDBModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.DTO.TransactionProductDBModel", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityBought")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionProducts");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.Models.StockPurchaseDBModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StockManagerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StockManagerId");

                    b.ToTable("StockPurchaseDBModel");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.Models.StockPurchaseProductDBModel", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StockPurchaseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityBought")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "StockPurchaseId");

                    b.HasIndex("StockPurchaseId");

                    b.ToTable("StockPurchaseProductDBModel");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.Models.UserDBModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b05b739-d2fc-4616-ad3a-1e476c690ff5"),
                            Password = "password",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.DTO.ProductDBModel", b =>
                {
                    b.HasOne("StoreManagementSystemX.Infrastructure.Models.UserDBModel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.DTO.TransactionDBModel", b =>
                {
                    b.HasOne("StoreManagementSystemX.Infrastructure.Models.UserDBModel", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("StoreManagementSystemX.Infrastructure.DTO.PayLaterDBModel", "PayLater", b1 =>
                        {
                            b1.Property<Guid>("TransactionDBModelId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CustomerName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<bool>("IsPaid")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime?>("PaidAt")
                                .HasColumnType("TEXT");

                            b1.HasKey("TransactionDBModelId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionDBModelId");
                        });

                    b.Navigation("PayLater");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.DTO.TransactionProductDBModel", b =>
                {
                    b.HasOne("StoreManagementSystemX.Infrastructure.DTO.ProductDBModel", "Product")
                        .WithMany("TransactionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreManagementSystemX.Infrastructure.DTO.TransactionDBModel", "Transaction")
                        .WithMany("TransactionProducts")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.Models.StockPurchaseDBModel", b =>
                {
                    b.HasOne("StoreManagementSystemX.Infrastructure.Models.UserDBModel", "StockManager")
                        .WithMany()
                        .HasForeignKey("StockManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockManager");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.Models.StockPurchaseProductDBModel", b =>
                {
                    b.HasOne("StoreManagementSystemX.Infrastructure.DTO.ProductDBModel", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreManagementSystemX.Infrastructure.Models.StockPurchaseDBModel", "StockPurchase")
                        .WithMany("StockPurchaseProducts")
                        .HasForeignKey("StockPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockPurchase");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.Models.UserDBModel", b =>
                {
                    b.HasOne("StoreManagementSystemX.Infrastructure.Models.UserDBModel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.DTO.ProductDBModel", b =>
                {
                    b.Navigation("TransactionProducts");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.DTO.TransactionDBModel", b =>
                {
                    b.Navigation("TransactionProducts");
                });

            modelBuilder.Entity("StoreManagementSystemX.Infrastructure.Models.StockPurchaseDBModel", b =>
                {
                    b.Navigation("StockPurchaseProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
