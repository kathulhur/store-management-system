using CommunityToolkit.Mvvm.Input;
using StoreManagementSystemX.Domain.Factories.Products.Interfaces;
using StoreManagementSystemX.Domain.Repositories.Products.Interfaces;
using StoreManagementSystemX.Services;
using StoreManagementSystemX.Services.Interfaces;
using StoreManagementSystemX.ViewModels.Products.Interfaces;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;

namespace StoreManagementSystemX.ViewModels.Products
{
    class CreateProductViewModel : BaseViewModel, ICreateProductArgs
    {
        public CreateProductViewModel(
            AuthContext authContext,
            Domain.Repositories.Products.Interfaces.IProductRepository productRepository,
            IBarcodeImageService barcodeImageService,
            Action<Guid> onAdd, 
            Action closeWindow)
        {
            _authContext = authContext;
            _productRepository = productRepository;
            _onAdd = onAdd;
            _closeWindow = closeWindow;
            SubmitCommand = new RelayCommand(SubmitCommandHandler);
            CancelCommand = new RelayCommand(CancelCommandHandler);
        }

        private readonly Domain.Repositories.Products.Interfaces.IProductRepository _productRepository;
        private bool _isBarcodeAutogenerated = false;
        public bool IsBarcodeAutogenerated 
        { 
            get => _isBarcodeAutogenerated;
            set
            {
                SetProperty(ref _isBarcodeAutogenerated, value);
                if (value == true)
                {
                    Barcode = null;
                } 
            }
        }

        private string? _barcode = string.Empty;
        public string? Barcode { get => _barcode; set => SetProperty(ref _barcode, value); }

        private string _name = string.Empty;
        public string Name { get => _name; set => SetProperty(ref _name, value); }


        private decimal _costPrice;
        public decimal CostPrice { get => _costPrice; set => SetProperty(ref _costPrice, value); }

        private decimal _sellingPrice;
        public decimal SellingPrice { get => _sellingPrice; set => SetProperty(ref _sellingPrice, value); }


        public ICommand SubmitCommand { get; }

        public ICommand CancelCommand { get; }

        public Guid CreatorId => _authContext.CurrentUser.Id;

        private void CancelCommandHandler()
        {
            _closeWindow();
        }

        private void SubmitCommandHandler()
        {
            var newProduct = _authContext.CurrentUser.ProductFactory.Create(this);
            _productRepository.Add(newProduct);
            _onAdd(newProduct.Id);
            _closeWindow();

        }


        private readonly AuthContext _authContext;

        private readonly Action _closeWindow;


        private readonly Action<Guid> _onAdd;


    }
}
